{"ast":null,"code":"var _jsxFileName = \"/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { axios } from \"./axios\";\nimport ArtistsSideBar from \"./components/artistsSideBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [artistsFull, setArtistsFull] = useState([]);\n  const [locationsFull, setLocationsFull] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [artistsResults, setArtistsResults] = useState([]);\n  const [locationsResults, setLocationsResults] = useState([]);\n  const inputEl = useRef(\"\"); //**** GET DATA  */\n\n  const getAllArtists = async () => {\n    const response = await axios.get(\"/artists\").catch(err => console.log(\"Error: \", err));\n\n    if (response && response.data) {\n      setArtistsFull(response.data);\n      setArtistsResults(response.data);\n    }\n  };\n\n  const getAllLocations = async () => {\n    const response = await axios.get(\"/locations\").catch(err => console.log(\"Error: \", err));\n    if (response && response.data) setLocationsFull(response.data);\n  };\n\n  useEffect(() => {\n    getAllArtists();\n    getAllLocations();\n  }, []); //return only artist with names that includes the input\n\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n\n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter(a => {\n        return Object.values(a).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist); //get distinct locations array from artistresults list\n    } else {\n      setArtistsResults(artistsFull);\n    }\n  }; // 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\n\n  const renderArtistList = () => {\n    return artistsResults.map(ar => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: ar.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 32\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputEl,\n        type: \"text\",\n        className: \"prompt\",\n        onChange: searchHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(ArtistsSideBar, {\n        className: \"sideBar\",\n        artists: artistsResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"SdmdFcaN+gHT8e8WEqI13L4CmRM=\");\n\n_c = App;\nexport default App; // value={searchTerm}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js"],"names":["React","useState","useEffect","useRef","axios","ArtistsSideBar","App","artistsFull","setArtistsFull","locationsFull","setLocationsFull","searchTerm","setSearchTerm","artistsResults","setArtistsResults","locationsResults","setLocationsResults","inputEl","getAllArtists","response","get","catch","err","console","log","data","getAllLocations","searchHandler","current","value","newArtistlist","filter","a","Object","values","join","toLowerCase","includes","renderArtistList","map","ar","name"],"mappings":"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","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\nimport {axios} from \"./axios\";\n\nimport ArtistsSideBar from \"./components/artistsSideBar\";\n\nconst App = () => {\n    const [artistsFull, setArtistsFull] =useState([])\n    const [locationsFull, setLocationsFull] =useState([])\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [artistsResults, setArtistsResults] = useState([]);\n    const [locationsResults, setLocationsResults] = useState([]);\n    const inputEl = useRef(\"\");\n\n\n//**** GET DATA  */\nconst getAllArtists = async()=>{\n  const response = await axios.get(\"/artists\").catch((err)=>console.log(\"Error: \",err))\n  if(response && response.data) {\n    setArtistsFull(response.data)\n    setArtistsResults(response.data)\n  }\n}\nconst getAllLocations = async()=>{\n  const response = await axios.get(\"/locations\").catch((err)=>console.log(\"Error: \",err))\n  if(response && response.data) setLocationsFull(response.data) \n}\n\nuseEffect(() => {\n  getAllArtists();\n  getAllLocations();\n},[])\n\n\n//return only artist with names that includes the input\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n    \n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter((a) => {\n        return Object.values(a)\n          .join(\" \")\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist);\n      //get distinct locations array from artistresults list\n\n     \n    } else {\n      setArtistsResults(artistsFull);\n      \n    }\n  };\n\n\n\n \n\n\n// 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\nconst renderArtistList =()=>{\n    return (\n      artistsResults.map((ar)=><p>{ar.name}</p>)\n    )\n}\n    return ( \n        <>\n        <div>\n           <input\n            ref={inputEl}\n            type=\"text\"\n            className=\"prompt\"\n            onChange={searchHandler}\n          />\n\n          \n <ArtistsSideBar\n            className=\"sideBar\"\n            artists={artistsResults}\n            \n          />\n         \n            \n          \n        </div>\n        </>\n     );\n}\n \nexport default App;\n// value={searchTerm}"]},"metadata":{},"sourceType":"module"}