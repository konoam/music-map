{"ast":null,"code":"var _jsxFileName = \"/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport apiArists from \"./api/db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [artists, setArtists] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const inputEl = useRef(\"\"); //search \n\n  const getSearchTerm = () => {\n    props.searchKeyword(inputEl.current.value);\n  };\n\n  const searchHandler = searchTerm => {\n    setSearchTerm(searchTerm);\n\n    if (searchTerm !== \"\") {\n      const newArtistlist = artists.filter(a => {\n        return Object.values(a).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setSearchResults(newArtistlist);\n    } else {\n      setSearchResults(artists);\n    }\n  }; //artists functions\n\n\n  const retrieveArtists = async () => {\n    const response = await apiArists.get(\"/artists\");\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getArtistsResults = async () => {\n      const allArtists = await retrieveArtists();\n      if (allArtists) setArtists(allArtists);\n    };\n\n    getArtistsResults();\n  }, [artists]);\n  useEffect(() => {}, [artists]); // 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\n  const renderArtistList = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"list of artist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputEl,\n        type: \"text\",\n        className: \"prompt\",\n        value: searchTerm,\n        onChange: Event.target.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderArtistList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"lkEUjR4Jwf7itXHeLi4/wwpNK+g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js"],"names":["React","useState","useEffect","useRef","apiArists","App","artists","setArtists","searchTerm","setSearchTerm","searchResults","setSearchResults","inputEl","getSearchTerm","props","searchKeyword","current","value","searchHandler","newArtistlist","filter","a","Object","values","join","toLowerCase","includes","retrieveArtists","response","get","data","getArtistsResults","allArtists","renderArtistList","Event","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;AACA,OAAOC,SAAP,MAAsB,UAAtB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAuBN,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAMW,OAAO,GAAGT,MAAM,CAAC,EAAD,CAAtB,CAJc,CAOlB;;AACC,QAAMU,aAAa,GAAG,MAAM;AAC1BC,IAAAA,KAAK,CAACC,aAAN,CAAoBH,OAAO,CAACI,OAAR,CAAgBC,KAApC;AACA,GAFF;;AAKC,QAAMC,aAAa,GAAIV,UAAD,IAAgB;AACpCC,IAAAA,aAAa,CAACD,UAAD,CAAb;;AACA,QAAIA,UAAU,KAAK,EAAnB,EAAuB;AACrB,YAAMW,aAAa,GAAGb,OAAO,CAACc,MAAR,CAAgBC,CAAD,IAAO;AAC1C,eAAOC,MAAM,CAACC,MAAP,CAAcF,CAAd,EACJG,IADI,CACC,GADD,EAEJC,WAFI,GAGJC,QAHI,CAGKlB,UAAU,CAACiB,WAAX,EAHL,CAAP;AAID,OALqB,CAAtB;AAMAd,MAAAA,gBAAgB,CAACQ,aAAD,CAAhB;AACD,KARD,MAQO;AACLR,MAAAA,gBAAgB,CAACL,OAAD,CAAhB;AACD;AACF,GAbD,CAbgB,CA+BjB;;;AACC,QAAMqB,eAAe,GAAG,YAAY;AAClC,UAAMC,QAAQ,GAAG,MAAMxB,SAAS,CAACyB,GAAV,CAAc,UAAd,CAAvB;AACA,WAAOD,QAAQ,CAACE,IAAhB;AACD,GAHD;;AAKA5B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,iBAAiB,GAAG,YAAY;AACpC,YAAMC,UAAU,GAAG,MAAML,eAAe,EAAxC;AACA,UAAIK,UAAJ,EAAgBzB,UAAU,CAACyB,UAAD,CAAV;AACjB,KAHD;;AAIAD,IAAAA,iBAAiB;AAClB,GANQ,EAMN,CAACzB,OAAD,CANM,CAAT;AAQAJ,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACI,OAAD,CAAX,CAAT,CA7CgB,CAkDlB;;AAEA,QAAM2B,gBAAgB,GAAE,MAAI;AACxB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD;;AAMI,sBACI;AAAA,2BACA;AAAA,8BACG;AACC,QAAA,GAAG,EAAErB,OADN;AAEC,QAAA,IAAI,EAAC,MAFN;AAGC,QAAA,SAAS,EAAC,QAHX;AAIC,QAAA,KAAK,EAAEJ,UAJR;AAKC,QAAA,QAAQ,EAAE0B,KAAK,CAACC,MAAN,CAAalB;AALxB;AAAA;AAAA;AAAA;AAAA,cADH,eASE;AAAA,kBAAMgB;AAAN;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAeH,CAzED;;GAAM5B,G;;KAAAA,G;AA2EN,eAAeA,GAAf","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\nimport apiArists from \"./api/db\";\n\nconst App = () => {\n    const [artists, setArtists] =useState([])\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [searchResults, setSearchResults] = useState([]);\n    const inputEl = useRef(\"\");\n\n\n//search \n const getSearchTerm = () => {\n   props.searchKeyword(inputEl.current.value);\n  };\n\n\n  const searchHandler = (searchTerm) => {\n    setSearchTerm(searchTerm);\n    if (searchTerm !== \"\") {\n      const newArtistlist = artists.filter((a) => {\n        return Object.values(a)\n          .join(\" \")\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n      });\n      setSearchResults(newArtistlist);\n    } else {\n      setSearchResults(artists);\n    }\n  };\n\n\n\n\n //artists functions\n  const retrieveArtists = async () => {\n    const response = await apiArists.get(\"/artists\");\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getArtistsResults = async () => {\n      const allArtists = await retrieveArtists();\n      if (allArtists) setArtists(allArtists);\n    };\n    getArtistsResults();\n  }, [artists]);\n\n  useEffect(() => {}, [artists]);\n\n\n\n\n// 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\nconst renderArtistList =()=>{\n    return <div>list of artist</div>\n}\n\n\n\n    return ( \n        <>\n        <div>\n           <input\n            ref={inputEl}\n            type=\"text\"\n            className=\"prompt\"\n            value={searchTerm}\n            onChange={Event.target.value}\n          />\n\n          <div>{renderArtistList}</div>\n        </div>\n        </>\n     );\n}\n \nexport default App;\n"]},"metadata":{},"sourceType":"module"}