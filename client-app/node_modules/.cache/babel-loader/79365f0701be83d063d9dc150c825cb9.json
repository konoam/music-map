{"ast":null,"code":"var _jsxFileName = \"/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport apiArists from \"./api/db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [artistsFull, setArtistsFull] = useState([]);\n  const [locationFull, setLocationsFull] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [artistsResults, setArtistsResults] = useState([]);\n  const [locationsResults, setLocationsResults] = useState([]);\n  const inputEl = useRef(\"\"); //search \n\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n    console.log(searchTerm);\n\n    if (searchTerm !== \"\") {\n      const newArtistlist = artists.filter(a => {\n        return Object.values(a).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setSearchResults(newArtistlist);\n      console.log(searchResults);\n    } else {\n      setSearchResults(artists);\n      console.log(artists);\n    }\n  }; //retrieve all from db\n\n\n  const retrieveAllArtists = async () => {\n    const response = await apiArists.get(\"/artists\");\n    return response.data;\n  }; //Set full artist results once as for all \n\n\n  useEffect(() => {\n    const getArtistsResults = async () => {\n      const allArtists = await retrieveAllArtists();\n      if (allArtists) setArtists(allArtists);\n    };\n\n    getArtistsResults();\n  }); //update location according to artist results - how to query api with location id \n\n  const retrieveLocations = async () => {\n    const response = await apiArists.get(\"/locations\");\n    return response.data;\n  };\n\n  useEffect(() => {\n    const getLocationResults = async () => {\n      const results = await retrieveLocations();\n      if (results) setLocations(results);\n    };\n\n    getLocationResults();\n  }, [searchResults]); // 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\n  const renderArtistList = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"list of artist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputEl,\n        type: \"text\",\n        className: \"prompt\",\n        onChange: searchHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderArtistList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"TXfjY95CAllVsknsIz8P4EUqh0I=\");\n\n_c = App;\nexport default App; // value={searchTerm}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js"],"names":["React","useState","useEffect","useRef","apiArists","App","artistsFull","setArtistsFull","locationFull","setLocationsFull","searchTerm","setSearchTerm","artistsResults","setArtistsResults","locationsResults","setLocationsResults","inputEl","searchHandler","current","value","console","log","newArtistlist","artists","filter","a","Object","values","join","toLowerCase","includes","setSearchResults","searchResults","retrieveAllArtists","response","get","data","getArtistsResults","allArtists","setArtists","retrieveLocations","getLocationResults","results","setLocations","renderArtistList"],"mappings":"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","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\nimport apiArists from \"./api/db\";\n\nconst App = () => {\n    const [artistsFull, setArtistsFull] =useState([])\n    const [locationFull, setLocationsFull] =useState([])\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [artistsResults, setArtistsResults] = useState([]);\n    const [locationsResults, setLocationsResults] = useState([]);\n    const inputEl = useRef(\"\");\n\n\n//search \n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n    console.log(searchTerm)\n    if (searchTerm !== \"\") {\n      const newArtistlist = artists.filter((a) => {\n        return Object.values(a)\n          .join(\" \")\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n      });\n      setSearchResults(newArtistlist);\n      console.log(searchResults)\n    } else {\n      setSearchResults(artists);\n      console.log(artists)\n    }\n  };\n\n\n\n\n //retrieve all from db\n  const retrieveAllArtists = async () => {\n    const response = await apiArists.get(\"/artists\");\n    return response.data;\n  };\n\n  \n//Set full artist results once as for all \n  useEffect(() => { \n    const getArtistsResults = async () => {\n      const allArtists = await retrieveAllArtists();\n      if (allArtists) setArtists(allArtists);\n    };\n    getArtistsResults();\n  });\n\n\n  //update location according to artist results - how to query api with location id \n   const retrieveLocations = async () => {\n    const response = await apiArists.get(\"/locations\");\n    return response.data;\n  };\n  \n  \n  useEffect(() => {\n    const getLocationResults = async () => {\n      const results = await retrieveLocations();\n      if (results) setLocations(results);\n    };\n    getLocationResults();\n  },[searchResults]);\n\n\n\n\n\n\n// 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\nconst renderArtistList =()=>{\n    return <div>list of artist</div>\n}\n    return ( \n        <>\n        <div>\n           <input\n            ref={inputEl}\n            type=\"text\"\n            className=\"prompt\"\n            onChange={searchHandler}\n          />\n\n          <div>{renderArtistList}</div>\n        </div>\n        </>\n     );\n}\n \nexport default App;\n// value={searchTerm}"]},"metadata":{},"sourceType":"module"}