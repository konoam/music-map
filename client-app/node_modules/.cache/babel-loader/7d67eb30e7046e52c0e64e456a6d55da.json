{"ast":null,"code":"var _jsxFileName = \"/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { axios } from \"./axios\";\nimport HeaderNavbar from \"./components/headerNavbar\";\nimport HomePage from \"./pages/HomePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [artistsFull, setArtistsFull] = useState([]);\n  const [locationsFull, setLocationsFull] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [artistsResults, setArtistsResults] = useState([]);\n  const [locationsResults, setLocationsResults] = useState([]);\n  const inputEl = useRef(\"\"); //**** GET DATA  */\n\n  const getAllArtists = async () => {\n    const response = await axios.get(\"/artists\").catch(err => console.log(\"Error: \", err));\n\n    if (response && response.data) {\n      setArtistsFull(response.data);\n      setArtistsResults(response.data);\n    }\n  };\n\n  const getAllLocations = async () => {\n    const response = await axios.get(\"/locations\").catch(err => console.log(\"Error: \", err));\n    if (response && response.data) setLocationsFull(response.data);\n  };\n\n  useEffect(() => {\n    getAllArtists();\n    getAllLocations();\n  }, []);\n\n  const getLocationsList = () => {\n    const locationsIdList = artistsResults.map(a => a.location);\n    const locationsToMark = locationsFull.filter(m => locationsIdList.includes(m.id));\n    setLocationsResults(locationsToMark);\n    console.log(locationsResults);\n  }; //return only artist with names that includes the input\n\n\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n\n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter(a => {\n        return Object.values(a).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist); //get distinct locations array from artistresults list\n\n      getLocationsList();\n    } else {\n      setArtistsResults(artistsFull);\n      getLocationsList();\n    }\n  }; // 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputEl,\n        type: \"text\",\n        className: \"prompt\",\n        onChange: searchHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(HomePage, {\n        artists: artistsResults,\n        locations: locationsFull\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"SdmdFcaN+gHT8e8WEqI13L4CmRM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js"],"names":["React","useState","useEffect","useRef","axios","HeaderNavbar","HomePage","App","artistsFull","setArtistsFull","locationsFull","setLocationsFull","searchTerm","setSearchTerm","artistsResults","setArtistsResults","locationsResults","setLocationsResults","inputEl","getAllArtists","response","get","catch","err","console","log","data","getAllLocations","getLocationsList","locationsIdList","map","a","location","locationsToMark","filter","m","includes","id","searchHandler","current","value","newArtistlist","Object","values","join","toLowerCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,WAAD,EAAcC,cAAd,IAA+BR,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAmCV,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACe,gBAAD,EAAmBC,mBAAnB,IAA0ChB,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAMiB,OAAO,GAAGf,MAAM,CAAC,EAAD,CAAtB,CANc,CASlB;;AACA,QAAMgB,aAAa,GAAG,YAAS;AAC7B,UAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAU,UAAV,EAAsBC,KAAtB,CAA6BC,GAAD,IAAOC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,GAAtB,CAAnC,CAAvB;;AACA,QAAGH,QAAQ,IAAIA,QAAQ,CAACM,IAAxB,EAA8B;AAC5BjB,MAAAA,cAAc,CAACW,QAAQ,CAACM,IAAV,CAAd;AACAX,MAAAA,iBAAiB,CAACK,QAAQ,CAACM,IAAV,CAAjB;AACD;AACF,GAND;;AAOA,QAAMC,eAAe,GAAG,YAAS;AAC/B,UAAMP,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAU,YAAV,EAAwBC,KAAxB,CAA+BC,GAAD,IAAOC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,GAAtB,CAArC,CAAvB;AACA,QAAGH,QAAQ,IAAIA,QAAQ,CAACM,IAAxB,EAA8Bf,gBAAgB,CAACS,QAAQ,CAACM,IAAV,CAAhB;AAC/B,GAHD;;AAKAxB,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,aAAa;AACbQ,IAAAA,eAAe;AAChB,GAHQ,EAGP,EAHO,CAAT;;AAMA,QAAMC,gBAAgB,GAAE,MAAI;AAC1B,UAAMC,eAAe,GAAGf,cAAc,CAACgB,GAAf,CAAmBC,CAAC,IAAGA,CAAC,CAACC,QAAzB,CAAxB;AACA,UAAMC,eAAe,GAAGvB,aAAa,CAACwB,MAAd,CAAqBC,CAAC,IAAIN,eAAe,CAACO,QAAhB,CAAyBD,CAAC,CAACE,EAA3B,CAA1B,CAAxB;AACApB,IAAAA,mBAAmB,CAACgB,eAAD,CAAnB;AACFT,IAAAA,OAAO,CAACC,GAAR,CAAYT,gBAAZ;AACC,GALD,CA5BkB,CAqClB;;;AACE,QAAMsB,aAAa,GAAG,MAAM;AAC1BzB,IAAAA,aAAa,CAACK,OAAO,CAACqB,OAAR,CAAgBC,KAAjB,CAAb;;AAEA,QAAI5B,UAAU,KAAK,EAAnB,EAAuB;AACrB,YAAM6B,aAAa,GAAGjC,WAAW,CAAC0B,MAAZ,CAAoBH,CAAD,IAAO;AAC9C,eAAOW,MAAM,CAACC,MAAP,CAAcZ,CAAd,EACJa,IADI,CACC,GADD,EAEJC,WAFI,GAGJT,QAHI,CAGKxB,UAAU,CAACiC,WAAX,EAHL,CAAP;AAID,OALqB,CAAtB;AAMA9B,MAAAA,iBAAiB,CAAC0B,aAAD,CAAjB,CAPqB,CAQrB;;AACAb,MAAAA,gBAAgB;AAEjB,KAXD,MAWO;AACLb,MAAAA,iBAAiB,CAACP,WAAD,CAAjB;AACAoB,MAAAA,gBAAgB;AACjB;AACF,GAlBD,CAtCgB,CA+DlB;;;AAEI,sBACI;AAAA,4BACA,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,8BACG;AACC,QAAA,GAAG,EAAEV,OADN;AAEC,QAAA,IAAI,EAAC,MAFN;AAGC,QAAA,SAAS,EAAC,QAHX;AAIC,QAAA,QAAQ,EAAEoB;AAJX;AAAA;AAAA;AAAA;AAAA,cADH,eAQI,QAAC,QAAD;AAAU,QAAA,OAAO,EAAExB,cAAnB;AAAmC,QAAA,SAAS,EAAEJ;AAA9C;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADJ;AAgBH,CAjFD;;GAAMH,G;;KAAAA,G;AAmFN,eAAeA,GAAf","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\nimport {axios} from \"./axios\";\n\nimport HeaderNavbar from \"./components/headerNavbar\";\nimport HomePage from \"./pages/HomePage\";\n\nconst App = () => {\n    const [artistsFull, setArtistsFull] =useState([])\n    const [locationsFull, setLocationsFull] =useState([])\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [artistsResults, setArtistsResults] = useState([]);\n    const [locationsResults, setLocationsResults] = useState([]);\n    const inputEl = useRef(\"\");\n\n\n//**** GET DATA  */\nconst getAllArtists = async()=>{\n  const response = await axios.get(\"/artists\").catch((err)=>console.log(\"Error: \",err))\n  if(response && response.data) {\n    setArtistsFull(response.data)\n    setArtistsResults(response.data)\n  }\n}\nconst getAllLocations = async()=>{\n  const response = await axios.get(\"/locations\").catch((err)=>console.log(\"Error: \",err))\n  if(response && response.data) setLocationsFull(response.data) \n}\n\nuseEffect(() => {\n  getAllArtists();\n  getAllLocations();\n},[])\n\n\nconst getLocationsList =()=>{\n  const locationsIdList = artistsResults.map(a=> a.location)\n  const locationsToMark = locationsFull.filter(m => locationsIdList.includes(m.id))\n  setLocationsResults(locationsToMark)\nconsole.log(locationsResults)\n}\n\n\n\n//return only artist with names that includes the input\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n    \n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter((a) => {\n        return Object.values(a)\n          .join(\" \")\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist);\n      //get distinct locations array from artistresults list\n      getLocationsList();\n     \n    } else {\n      setArtistsResults(artistsFull);\n      getLocationsList();\n    }\n  };\n\n\n\n \n\n\n// 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\n    return ( \n        <>\n        <HeaderNavbar/>\n        <div>\n           <input\n            ref={inputEl}\n            type=\"text\"\n            className=\"prompt\"\n            onChange={searchHandler}\n          />\n\n            <HomePage artists={artistsResults} locations={locationsFull}/>       \n          \n        </div>\n        </>\n     );\n}\n \nexport default App;\n"]},"metadata":{},"sourceType":"module"}