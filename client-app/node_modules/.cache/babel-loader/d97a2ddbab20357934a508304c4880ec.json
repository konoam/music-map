{"ast":null,"code":"var _jsxFileName = \"/Users/noamk/Documents/GitHub/music-map/src/App.js\";\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { HashRouter, Route } from \"react-router-dom\"; // import Login from \"./pages/Login\";\n// import Signup from \"./pages/Signup\";\n// import RecipesPage from \"./pages/RecipesPage\";\n\nimport HomePage from \"./pages/HomePage\";\nimport ArtistsNavbar from \"./components/ArtistsNavbar\";\nimport { Container } from \"react-bootstrap\";\nimport users from \"./data/users.json\";\nimport artistsJSON from \"./data/artists.json\"; // App is the main component for our Recipe app\n// State:\n// activeUser: Either null, if no user is logged in, or a user object if a user is logged in\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // 1) When adding new recipes, we updated localStorage.localRecipes, to have all the previous recipes\n    // plus the new one. We saved this informaition as a string\n    // 2) When loading the page: We check if we have localStorage info.\n    // if we have, we use the localStorage info and ignore the json\n    // if we don't, we simply use the JSON data\n\n    this.addUser = newUser => {\n      const localUsersString = JSON.stringify(this.state.allUsers.concat(newUser));\n      localStorage.localUsers = localUsersString;\n      this.setState({\n        activeUser: newUser,\n        allUsers: this.state.allUsers.concat(newUser)\n      });\n    };\n\n    this.addArtist = newArtist => {\n      //NewRecipe is an object with\n      // name, desc, img, userId, id\n      const localArtistsString = JSON.stringify(this.state.allArtists.concat(newArtist));\n      console.log(localArtistsString);\n      localStorage.localArtists = localArtistsString;\n      this.setState({\n        allArtists: this.state.allArtists.concat(newArtist)\n      });\n    };\n\n    this.login = userObj => {\n      this.setState({\n        activeUser: userObj\n      });\n    };\n\n    this.logout = () => {\n      this.setState({\n        activeUser: null\n      });\n    };\n\n    let artistsData = [];\n\n    if (localStorage.localRecipes) {\n      artistsData = JSON.parse(localStorage.localartists);\n    } else {\n      artistsData = artistsJSON;\n    }\n\n    let usersData = [];\n\n    if (localStorage.localUsers) {\n      usersData = JSON.parse(localStorage.localUsers);\n    } else {\n      usersData = userJSON;\n    }\n\n    this.state = {\n      allUsers: usersData,\n      allartists: usersData,\n      //activeUser: null\n      activeUser: {\n        id: 1,\n        name: \"Yaron\",\n        email: \"skarlinski@gmail.com\",\n        pwd: \"123\"\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: [\"/\", \"/recipes\"],\n        children: /*#__PURE__*/_jsxDEV(ArtistsNavbar, {\n          activeUser: this.state.activeUser,\n          logout: this.logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/recipes\",\n          children: /*#__PURE__*/_jsxDEV(RecipesPage, {\n            activeUser: this.state.activeUser,\n            allRecipes: this.state.allRecipes,\n            addRecipe: this.addRecipe\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/login\",\n          children: /*#__PURE__*/_jsxDEV(Login, {\n            allUsers: this.state.allUsers,\n            login: this.login\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(Signup, {\n            addUser: this.addUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/noamk/Documents/GitHub/music-map/src/App.js"],"names":["React","HashRouter","Route","HomePage","ArtistsNavbar","Container","users","artistsJSON","App","Component","constructor","props","addUser","newUser","localUsersString","JSON","stringify","state","allUsers","concat","localStorage","localUsers","setState","activeUser","addArtist","newArtist","localArtistsString","allArtists","console","log","localArtists","login","userObj","logout","artistsData","localRecipes","parse","localartists","usersData","userJSON","allartists","id","name","email","pwd","render","allRecipes","addRecipe"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./App.css\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\n// import Login from \"./pages/Login\";\n// import Signup from \"./pages/Signup\";\n// import RecipesPage from \"./pages/RecipesPage\";\nimport HomePage from \"./pages/HomePage\";\nimport ArtistsNavbar from \"./components/ArtistsNavbar\";\nimport { Container } from \"react-bootstrap\";\nimport users from \"./data/users.json\";\nimport artistsJSON from \"./data/artists.json\";\n// App is the main component for our Recipe app\n// State:\n// activeUser: Either null, if no user is logged in, or a user object if a user is logged in\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // 1) When adding new recipes, we updated localStorage.localRecipes, to have all the previous recipes\n    // plus the new one. We saved this informaition as a string\n    // 2) When loading the page: We check if we have localStorage info.\n    // if we have, we use the localStorage info and ignore the json\n    // if we don't, we simply use the JSON data\n\n    let artistsData = [];\n\n    if (localStorage.localRecipes) {\n      artistsData = JSON.parse(localStorage.localartists);\n    } else {\n      artistsData = artistsJSON;\n    }\n\n    let usersData = [];\n    if (localStorage.localUsers) {\n      usersData = JSON.parse(localStorage.localUsers);\n    } else {\n      usersData = userJSON;\n    }\n\n    this.state = {\n      allUsers: usersData,\n      allartists: usersData,\n      //activeUser: null\n      activeUser: {\n        id: 1,\n        name: \"Yaron\",\n        email: \"skarlinski@gmail.com\",\n        pwd: \"123\",\n      },\n    };\n  }\n  addUser = (newUser) => {\n    const localUsersString = JSON.stringify(\n      this.state.allUsers.concat(newUser)\n    );\n    localStorage.localUsers = localUsersString;\n    this.setState({\n      activeUser: newUser,\n      allUsers: this.state.allUsers.concat(newUser),\n    });\n  };\n\n  addArtist = (newArtist) => {\n    //NewRecipe is an object with\n    // name, desc, img, userId, id\n    const localArtistsString = JSON.stringify(\n      this.state.allArtists.concat(newArtist)\n    );\n    console.log(localArtistsString);\n    localStorage.localArtists = localArtistsString;\n\n    this.setState({\n      allArtists: this.state.allArtists.concat(newArtist),\n    });\n  };\n  login = (userObj) => {\n    this.setState({\n      activeUser: userObj,\n    });\n  };\n  logout = () => {\n    this.setState({\n      activeUser: null,\n    });\n  };\n  render() {\n    return (\n      <HashRouter>\n        <Route exact path={[\"/\", \"/recipes\"]}>\n          <ArtistsNavbar\n            activeUser={this.state.activeUser}\n            logout={this.logout}\n          />\n        </Route>\n        <Container>\n          <Route exact path=\"/\">\n            <HomePage></HomePage>\n          </Route>\n          <Route exact path=\"/recipes\">\n            <RecipesPage\n              activeUser={this.state.activeUser}\n              allRecipes={this.state.allRecipes}\n              addRecipe={this.addRecipe}\n            ></RecipesPage>\n          </Route>\n          <Route exact path=\"/login\">\n            <Login allUsers={this.state.allUsers} login={this.login} />\n          </Route>\n          <Route exact path=\"/signup\">\n            <Signup addUser={this.addUser} />\n          </Route>\n        </Container>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}