{"ast":null,"code":"var _jsxFileName = \"/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { axios } from \"./axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [artistsFull, setArtistsFull] = useState([]);\n  const [locationsFull, setLocationsFull] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [artistsResults, setArtistsResults] = useState([]);\n  const [locationsResults, setLocationsResults] = useState([]);\n  const inputEl = useRef(\"\"); //return only artist with names that includes the input\n\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n\n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter(a => {\n        return Object.values(a).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist);\n    } else {\n      setArtistsResults(artistsFull);\n    }\n  };\n\n  const getAllArtists = async () => {\n    const response = await axios.get(\"/artists\").catch(err => console.log(\"Error: \", err));\n    if (response && response.data) setArtistsFull(response.data);\n  }; // console.log(\"artists:\", artistsFull)\n  // console.log(\"locations:\", locationsFull)\n\n\n  const getAllLocations = async () => {\n    const response = await axios.get(\"/locations\").catch(err => console.log(\"Error: \", err));\n    if (response && response.data) setLocationsFull(response.data);\n  }; //run only once = didmount\n\n\n  useEffect(() => {\n    getAllArtists();\n    getAllLocations();\n  }, []); // 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\n  const renderArtistList = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"list of artist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputEl,\n        type: \"text\",\n        className: \"prompt\",\n        onChange: searchHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"SdmdFcaN+gHT8e8WEqI13L4CmRM=\");\n\n_c = App;\nexport default App; // value={searchTerm}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js"],"names":["React","useState","useEffect","useRef","axios","App","artistsFull","setArtistsFull","locationsFull","setLocationsFull","searchTerm","setSearchTerm","artistsResults","setArtistsResults","locationsResults","setLocationsResults","inputEl","searchHandler","current","value","newArtistlist","filter","a","Object","values","join","toLowerCase","includes","getAllArtists","response","get","catch","err","console","log","data","getAllLocations","renderArtistList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAAQC,KAAR,QAAoB,SAApB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,WAAD,EAAcC,cAAd,IAA+BN,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAmCR,QAAQ,CAAC,EAAD,CAAjD;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAMe,OAAO,GAAGb,MAAM,CAAC,EAAD,CAAtB,CANc,CASlB;;AACE,QAAMc,aAAa,GAAG,MAAM;AAC1BN,IAAAA,aAAa,CAACK,OAAO,CAACE,OAAR,CAAgBC,KAAjB,CAAb;;AAEA,QAAIT,UAAU,KAAK,EAAnB,EAAuB;AACrB,YAAMU,aAAa,GAAGd,WAAW,CAACe,MAAZ,CAAoBC,CAAD,IAAO;AAC9C,eAAOC,MAAM,CAACC,MAAP,CAAcF,CAAd,EACJG,IADI,CACC,GADD,EAEJC,WAFI,GAGJC,QAHI,CAGKjB,UAAU,CAACgB,WAAX,EAHL,CAAP;AAID,OALqB,CAAtB;AAMAb,MAAAA,iBAAiB,CAACO,aAAD,CAAjB;AAED,KATD,MASO;AACLP,MAAAA,iBAAiB,CAACP,WAAD,CAAjB;AAED;AACF,GAhBD;;AAmBF,QAAMsB,aAAa,GAAG,YAAS;AAC7B,UAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,CAAU,UAAV,EAAsBC,KAAtB,CAA6BC,GAAD,IAAOC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,GAAtB,CAAnC,CAAvB;AACA,QAAGH,QAAQ,IAAIA,QAAQ,CAACM,IAAxB,EAA8B5B,cAAc,CAACsB,QAAQ,CAACM,IAAV,CAAd;AAG/B,GALD,CA7BkB,CAmClB;AACA;;;AAEA,QAAMC,eAAe,GAAG,YAAS;AAC/B,UAAMP,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,CAAU,YAAV,EAAwBC,KAAxB,CAA+BC,GAAD,IAAOC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBF,GAAtB,CAArC,CAAvB;AACA,QAAGH,QAAQ,IAAIA,QAAQ,CAACM,IAAxB,EAA8B1B,gBAAgB,CAACoB,QAAQ,CAACM,IAAV,CAAhB;AAC/B,GAHD,CAtCkB,CA2ClB;;;AACAjC,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,aAAa;AACdQ,IAAAA,eAAe;AACf,GAHQ,EAGP,EAHO,CAAT,CA5CkB,CAmDlB;;AAEA,QAAMC,gBAAgB,GAAE,MAAI;AACxB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD;;AAGI,sBACI;AAAA,2BACA;AAAA,6BACG;AACC,QAAA,GAAG,EAAErB,OADN;AAEC,QAAA,IAAI,EAAC,MAFN;AAGC,QAAA,SAAS,EAAC,QAHX;AAIC,QAAA,QAAQ,EAAEC;AAJX;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAcH,CAtED;;GAAMZ,G;;KAAAA,G;AAwEN,eAAeA,GAAf,C,CACA","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\nimport {axios} from \"./axios\";\n\nconst App = () => {\n    const [artistsFull, setArtistsFull] =useState([])\n    const [locationsFull, setLocationsFull] =useState([])\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [artistsResults, setArtistsResults] = useState([]);\n    const [locationsResults, setLocationsResults] = useState([]);\n    const inputEl = useRef(\"\");\n\n\n//return only artist with names that includes the input\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n    \n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter((a) => {\n        return Object.values(a)\n          .join(\" \")\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist);\n     \n    } else {\n      setArtistsResults(artistsFull);\n      \n    }\n  };\n\n\nconst getAllArtists = async()=>{\n  const response = await axios.get(\"/artists\").catch((err)=>console.log(\"Error: \",err))\n  if(response && response.data) setArtistsFull(response.data)\n  \n  \n}\n// console.log(\"artists:\", artistsFull)\n// console.log(\"locations:\", locationsFull)\n\nconst getAllLocations = async()=>{\n  const response = await axios.get(\"/locations\").catch((err)=>console.log(\"Error: \",err))\n  if(response && response.data) setLocationsFull(response.data) \n}\n\n//run only once = didmount\nuseEffect(() => {\n  getAllArtists();\n getAllLocations();\n},[])\n \n\n\n// 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\nconst renderArtistList =()=>{\n    return <div>list of artist</div>\n}\n    return ( \n        <>\n        <div>\n           <input\n            ref={inputEl}\n            type=\"text\"\n            className=\"prompt\"\n            onChange={searchHandler}\n          />\n\n          \n        </div>\n        </>\n     );\n}\n \nexport default App;\n// value={searchTerm}"]},"metadata":{},"sourceType":"module"}