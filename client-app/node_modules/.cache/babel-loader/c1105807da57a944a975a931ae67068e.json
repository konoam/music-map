{"ast":null,"code":"var _jsxFileName = \"/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport apiArists from \"./api/db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [artistsFull, setArtistsFull] = useState([]);\n  const [locationFull, setLocationsFull] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [artistsResults, setArtistsResults] = useState([]);\n  const [locationsResults, setLocationsResults] = useState([]);\n  const inputEl = useRef(\"\"); //return only artist with names that includes the input\n\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n    console.log(searchTerm);\n\n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter(a => {\n        return Object.values(a).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist);\n      console.log(artistsResults);\n    } else {\n      setArtistsResults(artistsFull);\n      console.log(artistsFull);\n    }\n  }; //retrieve all from db\n\n\n  const retrieveAllArtists = async () => {\n    const response = await apiArists.get(\"/artists\").then(setArtistsFull(response.data).catch(error => {\n      console.log(error.message);\n    }));\n  };\n\n  const retrieveLocations = async () => {\n    const response = await apiArists.get(\"/locations\");\n    return response.data;\n  }; //Set full artist results once as for all \n\n\n  useEffect(() => {\n    retrieveAllArtists(); // const getLocationResults = async () => {\n    //   const results = await retrieveLocations();\n    //   if (results) setLocationsFull(results);\n    // };\n    // getLocationResults();\n  }); // 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\n  const renderArtistList = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"list of artist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputEl,\n        type: \"text\",\n        className: \"prompt\",\n        onChange: searchHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"QRnoGE+Ix5L9PcS6aaagxXIdA5c=\");\n\n_c = App;\nexport default App; // value={searchTerm}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/noamk/Documents/GitHub/music-map/client-app/src/App.js"],"names":["React","useState","useEffect","useRef","apiArists","App","artistsFull","setArtistsFull","locationFull","setLocationsFull","searchTerm","setSearchTerm","artistsResults","setArtistsResults","locationsResults","setLocationsResults","inputEl","searchHandler","current","value","console","log","newArtistlist","filter","a","Object","values","join","toLowerCase","includes","retrieveAllArtists","response","get","then","data","catch","error","message","retrieveLocations","renderArtistList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;AACA,OAAOC,SAAP,MAAsB,UAAtB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,WAAD,EAAcC,cAAd,IAA+BN,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAM,CAACO,YAAD,EAAeC,gBAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACW,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAMe,OAAO,GAAGb,MAAM,CAAC,EAAD,CAAtB,CANc,CASlB;;AACE,QAAMc,aAAa,GAAG,MAAM;AAC1BN,IAAAA,aAAa,CAACK,OAAO,CAACE,OAAR,CAAgBC,KAAjB,CAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;;AACA,QAAIA,UAAU,KAAK,EAAnB,EAAuB;AACrB,YAAMY,aAAa,GAAGhB,WAAW,CAACiB,MAAZ,CAAoBC,CAAD,IAAO;AAC9C,eAAOC,MAAM,CAACC,MAAP,CAAcF,CAAd,EACJG,IADI,CACC,GADD,EAEJC,WAFI,GAGJC,QAHI,CAGKnB,UAAU,CAACkB,WAAX,EAHL,CAAP;AAID,OALqB,CAAtB;AAMAf,MAAAA,iBAAiB,CAACS,aAAD,CAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACD,KATD,MASO;AACLC,MAAAA,iBAAiB,CAACP,WAAD,CAAjB;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AACD;AACF,GAhBD,CAVgB,CA+BjB;;;AACC,QAAMwB,kBAAkB,GAAG,YAAY;AACrC,UAAMC,QAAQ,GAAG,MAAM3B,SAAS,CAAC4B,GAAV,CAAc,UAAd,EAA0BC,IAA1B,CACrB1B,cAAc,CAACwB,QAAQ,CAACG,IAAV,CAAd,CAA8BC,KAA9B,CAAqCC,KAAD,IAAS;AAAChB,MAAAA,OAAO,CAACC,GAAR,CAAYe,KAAK,CAACC,OAAlB;AAA2B,KAAzE,CADqB,CAAvB;AAEG,GAHL;;AAID,QAAMC,iBAAiB,GAAG,YAAY;AACnC,UAAMP,QAAQ,GAAG,MAAM3B,SAAS,CAAC4B,GAAV,CAAc,YAAd,CAAvB;AACA,WAAOD,QAAQ,CAACG,IAAhB;AACD,GAHF,CApCiB,CA0ClB;;;AACEhC,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,kBAAkB,GADJ,CAEd;AACA;AACA;AACA;AAEA;AACD,GARQ,CAAT,CA3CgB,CAgElB;;AAEA,QAAMS,gBAAgB,GAAE,MAAI;AACxB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD;;AAGI,sBACI;AAAA,2BACA;AAAA,6BACG;AACC,QAAA,GAAG,EAAEvB,OADN;AAEC,QAAA,IAAI,EAAC,MAFN;AAGC,QAAA,SAAS,EAAC,QAHX;AAIC,QAAA,QAAQ,EAAEC;AAJX;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA;AADA,mBADJ;AAcH,CAnFD;;GAAMZ,G;;KAAAA,G;AAqFN,eAAeA,GAAf,C,CACA","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\nimport apiArists from \"./api/db\";\n\nconst App = () => {\n    const [artistsFull, setArtistsFull] =useState([])\n    const [locationFull, setLocationsFull] =useState([])\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [artistsResults, setArtistsResults] = useState([]);\n    const [locationsResults, setLocationsResults] = useState([]);\n    const inputEl = useRef(\"\");\n\n\n//return only artist with names that includes the input\n  const searchHandler = () => {\n    setSearchTerm(inputEl.current.value);\n    console.log(searchTerm)\n    if (searchTerm !== \"\") {\n      const newArtistlist = artistsFull.filter((a) => {\n        return Object.values(a)\n          .join(\" \")\n          .toLowerCase()\n          .includes(searchTerm.toLowerCase());\n      });\n      setArtistsResults(newArtistlist);\n      console.log(artistsResults)\n    } else {\n      setArtistsResults(artistsFull);\n      console.log(artistsFull)\n    }\n  };\n\n\n\n\n //retrieve all from db\n  const retrieveAllArtists = async () => {\n    const response = await apiArists.get(\"/artists\").then(\n      setArtistsFull(response.data).catch((error)=>{console.log(error.message)})\n    );};\n const retrieveLocations = async () => {\n    const response = await apiArists.get(\"/locations\");\n    return response.data;\n  };\n  \n  \n//Set full artist results once as for all \n  useEffect(() => { \n    retrieveAllArtists();\n    // const getLocationResults = async () => {\n    //   const results = await retrieveLocations();\n    //   if (results) setLocationsFull(results);\n    // };\n\n    // getLocationResults();\n  });\n\n\n  \n  \n  \n \n\n\n\n\n\n\n// 1. add search textbox, 2.get values from it , 3.filterartist list 4.get location from artist 5.setLocation 5.mark map\n\nconst renderArtistList =()=>{\n    return <div>list of artist</div>\n}\n    return ( \n        <>\n        <div>\n           <input\n            ref={inputEl}\n            type=\"text\"\n            className=\"prompt\"\n            onChange={searchHandler}\n          />\n\n          \n        </div>\n        </>\n     );\n}\n \nexport default App;\n// value={searchTerm}"]},"metadata":{},"sourceType":"module"}